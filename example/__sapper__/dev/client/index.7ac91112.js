import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_each_argument, a as validate_slots, o as onMount, b as svg_element, e as empty, c as claim_element, f as children, g as detach_dev, h as attr_dev, j as add_location, k as insert_dev, n as noop, l as destroy_each, m as append_dev, p as space, q as element, r as create_component, t as text, u as query_selector_all, w as claim_space, x as claim_component, y as claim_text, z as mount_component, A as transition_in, B as transition_out, C as destroy_component } from './client.bc35aeb3.js';

/* ../src/Clock.svelte generated by Svelte v3.38.2 */
const file$1 = "../src/Clock.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	return child_ctx;
}

// (35:2) {#each [1, 2, 3, 4] as offset}
function create_each_block_1(ctx) {
	let line;

	const block = {
		c: function create() {
			line = svg_element("line");
			this.h();
		},
		l: function claim(nodes) {
			line = claim_element(
				nodes,
				"line",
				{
					class: true,
					y1: true,
					y2: true,
					transform: true
				},
				1
			);

			children(line).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(line, "class", "minor svelte-1xs85ek");
			attr_dev(line, "y1", "42");
			attr_dev(line, "y2", "45");
			attr_dev(line, "transform", "rotate(" + 6 * (/*minute*/ ctx[4] + /*offset*/ ctx[7]) + ")");
			add_location(line, file$1, 35, 3, 686);
		},
		m: function mount(target, anchor) {
			insert_dev(target, line, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(line);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(35:2) {#each [1, 2, 3, 4] as offset}",
		ctx
	});

	return block;
}

// (27:1) {#each [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55] as minute}
function create_each_block(ctx) {
	let line;
	let each_1_anchor;
	let each_value_1 = [1, 2, 3, 4];
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < 4; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			line = svg_element("line");

			for (let i = 0; i < 4; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			line = claim_element(
				nodes,
				"line",
				{
					class: true,
					y1: true,
					y2: true,
					transform: true
				},
				1
			);

			children(line).forEach(detach_dev);

			for (let i = 0; i < 4; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			attr_dev(line, "class", "major svelte-1xs85ek");
			attr_dev(line, "y1", "35");
			attr_dev(line, "y2", "45");
			attr_dev(line, "transform", "rotate(" + 30 * /*minute*/ ctx[4] + ")");
			add_location(line, file$1, 27, 2, 562);
		},
		m: function mount(target, anchor) {
			insert_dev(target, line, anchor);

			for (let i = 0; i < 4; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(line);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(27:1) {#each [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55] as minute}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let svg;
	let circle;
	let line0;
	let line0_transform_value;
	let line1;
	let line1_transform_value;
	let g;
	let line2;
	let line3;
	let g_transform_value;
	let each_value = [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < 12; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			svg = svg_element("svg");
			circle = svg_element("circle");

			for (let i = 0; i < 12; i += 1) {
				each_blocks[i].c();
			}

			line0 = svg_element("line");
			line1 = svg_element("line");
			g = svg_element("g");
			line2 = svg_element("line");
			line3 = svg_element("line");
			this.h();
		},
		l: function claim(nodes) {
			svg = claim_element(nodes, "svg", { viewBox: true, class: true }, 1);
			var svg_nodes = children(svg);
			circle = claim_element(svg_nodes, "circle", { class: true, r: true }, 1);
			children(circle).forEach(detach_dev);

			for (let i = 0; i < 12; i += 1) {
				each_blocks[i].l(svg_nodes);
			}

			line0 = claim_element(
				svg_nodes,
				"line",
				{
					class: true,
					y1: true,
					y2: true,
					transform: true
				},
				1
			);

			children(line0).forEach(detach_dev);

			line1 = claim_element(
				svg_nodes,
				"line",
				{
					class: true,
					y1: true,
					y2: true,
					transform: true
				},
				1
			);

			children(line1).forEach(detach_dev);
			g = claim_element(svg_nodes, "g", { transform: true }, 1);
			var g_nodes = children(g);
			line2 = claim_element(g_nodes, "line", { class: true, y1: true, y2: true }, 1);
			children(line2).forEach(detach_dev);
			line3 = claim_element(g_nodes, "line", { class: true, y1: true, y2: true }, 1);
			children(line3).forEach(detach_dev);
			g_nodes.forEach(detach_dev);
			svg_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(circle, "class", "clock-face svelte-1xs85ek");
			attr_dev(circle, "r", "48");
			add_location(circle, file$1, 23, 1, 439);
			attr_dev(line0, "class", "hour svelte-1xs85ek");
			attr_dev(line0, "y1", "2");
			attr_dev(line0, "y2", "-20");
			attr_dev(line0, "transform", line0_transform_value = "rotate(" + (30 * /*hours*/ ctx[0] + /*minutes*/ ctx[1] / 2) + ")");
			add_location(line0, file$1, 45, 1, 829);
			attr_dev(line1, "class", "minute svelte-1xs85ek");
			attr_dev(line1, "y1", "4");
			attr_dev(line1, "y2", "-30");
			attr_dev(line1, "transform", line1_transform_value = "rotate(" + (6 * /*minutes*/ ctx[1] + /*seconds*/ ctx[2] / 10) + ")");
			add_location(line1, file$1, 53, 1, 947);
			attr_dev(line2, "class", "second svelte-1xs85ek");
			attr_dev(line2, "y1", "10");
			attr_dev(line2, "y2", "-38");
			add_location(line2, file$1, 62, 2, 1109);
			attr_dev(line3, "class", "second-counterweight svelte-1xs85ek");
			attr_dev(line3, "y1", "10");
			attr_dev(line3, "y2", "2");
			add_location(line3, file$1, 63, 2, 1151);
			attr_dev(g, "transform", g_transform_value = "rotate(" + 6 * /*seconds*/ ctx[2] + ")");
			add_location(g, file$1, 61, 1, 1069);
			attr_dev(svg, "viewBox", "-50 -50 100 100");
			attr_dev(svg, "class", "svelte-1xs85ek");
			add_location(svg, file$1, 22, 0, 406);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, circle);

			for (let i = 0; i < 12; i += 1) {
				each_blocks[i].m(svg, null);
			}

			append_dev(svg, line0);
			append_dev(svg, line1);
			append_dev(svg, g);
			append_dev(g, line2);
			append_dev(g, line3);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*hours, minutes*/ 3 && line0_transform_value !== (line0_transform_value = "rotate(" + (30 * /*hours*/ ctx[0] + /*minutes*/ ctx[1] / 2) + ")")) {
				attr_dev(line0, "transform", line0_transform_value);
			}

			if (dirty & /*minutes, seconds*/ 6 && line1_transform_value !== (line1_transform_value = "rotate(" + (6 * /*minutes*/ ctx[1] + /*seconds*/ ctx[2] / 10) + ")")) {
				attr_dev(line1, "transform", line1_transform_value);
			}

			if (dirty & /*seconds*/ 4 && g_transform_value !== (g_transform_value = "rotate(" + 6 * /*seconds*/ ctx[2] + ")")) {
				attr_dev(g, "transform", g_transform_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let hours;
	let minutes;
	let seconds;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Clock", slots, []);
	let time = new Date();

	onMount(() => {
		const interval = setInterval(
			() => {
				$$invalidate(3, time = new Date());
			},
			1000
		);

		return () => {
			clearInterval(interval);
		};
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Clock> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ onMount, time, hours, minutes, seconds });

	$$self.$inject_state = $$props => {
		if ("time" in $$props) $$invalidate(3, time = $$props.time);
		if ("hours" in $$props) $$invalidate(0, hours = $$props.hours);
		if ("minutes" in $$props) $$invalidate(1, minutes = $$props.minutes);
		if ("seconds" in $$props) $$invalidate(2, seconds = $$props.seconds);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*time*/ 8) {
			// these automatically update when `time`
			// changes, because of the `$:` prefix
			$$invalidate(0, hours = time.getHours());
		}

		if ($$self.$$.dirty & /*time*/ 8) {
			$$invalidate(1, minutes = time.getMinutes());
		}

		if ($$self.$$.dirty & /*time*/ 8) {
			$$invalidate(2, seconds = time.getSeconds());
		}
	};

	return [hours, minutes, seconds, time];
}

class Clock extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Clock",
			options,
			id: create_fragment$1.name
		});
	}
}

/* src/routes/index.svelte generated by Svelte v3.38.2 */
const file = "src/routes/index.svelte";

function create_fragment(ctx) {
	let t0;
	let h1;
	let t1;
	let mycomponent;
	let t2;
	let figure;
	let figcaption;
	let t3;
	let t4;
	let p;
	let strong;
	let t5;
	let current;
	mycomponent = new MyComponent({ $$inline: true });

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = space();
			create_component(mycomponent.$$.fragment);
			t2 = space();
			figure = element("figure");
			figcaption = element("figcaption");
			t3 = text("Have fun with Sapper!");
			t4 = space();
			p = element("p");
			strong = element("strong");
			t5 = text("Try editing this file (src/routes/index.svelte) to test live reloading.");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-oh6yg0\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			claim_component(mycomponent.$$.fragment, nodes);
			t2 = claim_space(nodes);
			figure = claim_element(nodes, "FIGURE", { class: true });
			var figure_nodes = children(figure);
			figcaption = claim_element(figure_nodes, "FIGCAPTION", {});
			var figcaption_nodes = children(figcaption);
			t3 = claim_text(figcaption_nodes, "Have fun with Sapper!");
			figcaption_nodes.forEach(detach_dev);
			figure_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			strong = claim_element(p_nodes, "STRONG", {});
			var strong_nodes = children(strong);
			t5 = claim_text(strong_nodes, "Try editing this file (src/routes/index.svelte) to test live reloading.");
			strong_nodes.forEach(detach_dev);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Sapper project template";
			attr_dev(h1, "class", "svelte-owv8pc");
			add_location(h1, file, 36, 0, 441);
			add_location(figcaption, file, 42, 1, 480);
			attr_dev(figure, "class", "svelte-owv8pc");
			add_location(figure, file, 41, 0, 470);
			add_location(strong, file, 45, 3, 541);
			attr_dev(p, "class", "svelte-owv8pc");
			add_location(p, file, 45, 0, 538);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			insert_dev(target, t1, anchor);
			mount_component(mycomponent, target, anchor);
			insert_dev(target, t2, anchor);
			insert_dev(target, figure, anchor);
			append_dev(figure, figcaption);
			append_dev(figcaption, t3);
			insert_dev(target, t4, anchor);
			insert_dev(target, p, anchor);
			append_dev(p, strong);
			append_dev(strong, t5);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(mycomponent.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(mycomponent.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t1);
			destroy_component(mycomponent, detaching);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(figure);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Routes", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ Clock });
	return [];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguN2FjOTExMTIuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9DbG9jay5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cblx0aW1wb3J0IHsgb25Nb3VudCB9IGZyb20gJ3N2ZWx0ZSc7XG5cblx0bGV0IHRpbWUgPSBuZXcgRGF0ZSgpO1xuXG5cdC8vIHRoZXNlIGF1dG9tYXRpY2FsbHkgdXBkYXRlIHdoZW4gYHRpbWVgXG5cdC8vIGNoYW5nZXMsIGJlY2F1c2Ugb2YgdGhlIGAkOmAgcHJlZml4XG5cdCQ6IGhvdXJzID0gdGltZS5nZXRIb3VycygpO1xuXHQkOiBtaW51dGVzID0gdGltZS5nZXRNaW51dGVzKCk7XG5cdCQ6IHNlY29uZHMgPSB0aW1lLmdldFNlY29uZHMoKTtcblxuXHRvbk1vdW50KCgpID0+IHtcblx0XHRjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcblx0XHRcdHRpbWUgPSBuZXcgRGF0ZSgpO1xuXHRcdH0sIDEwMDApO1xuXG5cdFx0cmV0dXJuICgpID0+IHtcblx0XHRcdGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuXHRcdH07XG5cdH0pO1xuPC9zY3JpcHQ+XG5cbjxzdmcgdmlld0JveD0nLTUwIC01MCAxMDAgMTAwJz5cblx0PGNpcmNsZSBjbGFzcz0nY2xvY2stZmFjZScgcj0nNDgnLz5cblxuXHQ8IS0tIG1hcmtlcnMgLS0+XG5cdHsjZWFjaCBbMCwgNSwgMTAsIDE1LCAyMCwgMjUsIDMwLCAzNSwgNDAsIDQ1LCA1MCwgNTVdIGFzIG1pbnV0ZX1cblx0XHQ8bGluZVxuXHRcdFx0Y2xhc3M9J21ham9yJ1xuXHRcdFx0eTE9JzM1J1xuXHRcdFx0eTI9JzQ1J1xuXHRcdFx0dHJhbnNmb3JtPSdyb3RhdGUoezMwICogbWludXRlfSknXG5cdFx0Lz5cblxuXHRcdHsjZWFjaCBbMSwgMiwgMywgNF0gYXMgb2Zmc2V0fVxuXHRcdFx0PGxpbmVcblx0XHRcdFx0Y2xhc3M9J21pbm9yJ1xuXHRcdFx0XHR5MT0nNDInXG5cdFx0XHRcdHkyPSc0NSdcblx0XHRcdFx0dHJhbnNmb3JtPSdyb3RhdGUoezYgKiAobWludXRlICsgb2Zmc2V0KX0pJ1xuXHRcdFx0Lz5cblx0XHR7L2VhY2h9XG5cdHsvZWFjaH1cblxuXHQ8IS0tIGhvdXIgaGFuZCAtLT5cblx0PGxpbmVcblx0XHRjbGFzcz0naG91cidcblx0XHR5MT0nMidcblx0XHR5Mj0nLTIwJ1xuXHRcdHRyYW5zZm9ybT0ncm90YXRlKHszMCAqIGhvdXJzICsgbWludXRlcyAvIDJ9KSdcblx0Lz5cblxuXHQ8IS0tIG1pbnV0ZSBoYW5kIC0tPlxuXHQ8bGluZVxuXHRcdGNsYXNzPSdtaW51dGUnXG5cdFx0eTE9JzQnXG5cdFx0eTI9Jy0zMCdcblx0XHR0cmFuc2Zvcm09J3JvdGF0ZSh7NiAqIG1pbnV0ZXMgKyBzZWNvbmRzIC8gMTB9KSdcblx0Lz5cblxuXHQ8IS0tIHNlY29uZCBoYW5kIC0tPlxuXHQ8ZyB0cmFuc2Zvcm09J3JvdGF0ZSh7NiAqIHNlY29uZHN9KSc+XG5cdFx0PGxpbmUgY2xhc3M9J3NlY29uZCcgeTE9JzEwJyB5Mj0nLTM4Jy8+XG5cdFx0PGxpbmUgY2xhc3M9J3NlY29uZC1jb3VudGVyd2VpZ2h0JyB5MT0nMTAnIHkyPScyJy8+XG5cdDwvZz5cbjwvc3ZnPlxuXG48c3R5bGU+XG5cdHN2ZyB7XG5cdFx0d2lkdGg6IDEwMCU7XG5cdFx0aGVpZ2h0OiAxMDAlO1xuXHR9XG5cblx0LmNsb2NrLWZhY2Uge1xuXHRcdHN0cm9rZTogIzMzMztcblx0XHRmaWxsOiB3aGl0ZTtcblx0fVxuXG5cdC5taW5vciB7XG5cdFx0c3Ryb2tlOiAjOTk5O1xuXHRcdHN0cm9rZS13aWR0aDogMC41O1xuXHR9XG5cblx0Lm1ham9yIHtcblx0XHRzdHJva2U6ICMzMzM7XG5cdFx0c3Ryb2tlLXdpZHRoOiAxO1xuXHR9XG5cblx0LmhvdXIge1xuXHRcdHN0cm9rZTogIzMzMztcblx0fVxuXG5cdC5taW51dGUge1xuXHRcdHN0cm9rZTogIzY2Njtcblx0fVxuXG5cdC5zZWNvbmQsIC5zZWNvbmQtY291bnRlcndlaWdodCB7XG5cdFx0c3Ryb2tlOiByZ2IoMTgwLDAsMCk7XG5cdH1cblxuXHQuc2Vjb25kLWNvdW50ZXJ3ZWlnaHQge1xuXHRcdHN0cm9rZS13aWR0aDogMztcblx0fVxuPC9zdHlsZT5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzJDQXVDdUIsQ0FBQyxlQUFJLEdBQU0saUJBQUcsR0FBTTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7cUJBTGpDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsyQ0FIRSxFQUFFLGNBQUcsR0FBTTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O21CQUx4QixDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztxRUF1QmhDLEVBQUUsYUFBRyxHQUFLLGtCQUFHLEdBQU8sTUFBRyxDQUFDOzs7OztxRUFReEIsQ0FBQyxlQUFHLEdBQU8sa0JBQUcsR0FBTyxNQUFHLEVBQUU7Ozs7Ozs7Ozs7NERBSXhCLENBQUMsZUFBRyxHQUFPOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7dUdBWmIsRUFBRSxhQUFHLEdBQUssa0JBQUcsR0FBTyxNQUFHLENBQUM7Ozs7eUdBUXhCLENBQUMsZUFBRyxHQUFPLGtCQUFHLEdBQU8sTUFBRyxFQUFFOzs7O3VGQUl4QixDQUFDLGVBQUcsR0FBTzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0ExRDdCLElBQUksT0FBTyxJQUFJOztDQVFuQixPQUFPO1FBQ0EsUUFBUSxHQUFHLFdBQVc7O29CQUMzQixJQUFJLE9BQU8sSUFBSTs7R0FDYixJQUFJOzs7O0dBR04sYUFBYSxDQUFDLFFBQVE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzttQkFWckIsS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFROzs7O21CQUNyQixPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVU7Ozs7bUJBQ3pCLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
